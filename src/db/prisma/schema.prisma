generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id              String                    @id @default(cuid())
  user_name            String
  email                String                    @unique
  emailVerified        DateTime?
  image_url            String
  isSubscribed         Boolean                   @default(false)
  subscriptionEnds     DateTime?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  jobApplications      JobApplication[]
  resume               UserResume?
  notificationSettings UserNotificationSettings?
  accounts             Account[]
  password             String?
  salt                 String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Organisation {
  org_id      String    @id @default(uuid())
  org_name    String
  image_url   String?
  description String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  jobPosts    JobPost[]
}

model JobPost {
  post_id        String              @id @default(uuid())
  title          String
  description    String
  type           JobTypeEnum
  status         JobPostStatus       @default(DRAFT)
  location_type  LocationTypeEnum
  state          String?
  city           String?
  salary         Float?
  experience     ExperienceLevelEnum
  postedAt       DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organisation   Organisation        @relation(fields: [organisationId], references: [org_id], onDelete: Cascade)
  organisationId String
  applications   JobApplication[]
}

model JobApplication {
  user      User                  @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  userId    String
  post      JobPost               @relation(fields: [postId], references: [post_id], onDelete: Cascade)
  postId    String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  status    ApplicationStatusEnum
  rating    Int

  @@id([userId, postId])
}

model UserResume {
  userId        String   @id @unique
  user          User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  resumeFileUrl String
  resumeFileKey String
  aiSummary     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserNotificationSettings {
  userId                  String   @id @unique
  user                    User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  newJobEmailNotification Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

enum LocationTypeEnum {
  IN_OFFICE
  HYBRID
  REMOTE
}

enum ExperienceLevelEnum {
  FRESHER
  JUNIOR
  MID_LEVEL
  SENIOR
}

enum JobPostStatus {
  DRAFT
  PUBLISHED
  DELISTED
}

enum JobTypeEnum {
  INTERNSHIP
  PART_TIME
  FULL_TIME
}

enum ApplicationStatusEnum {
  APPLIED
  REJECTED
  INTERESTED
  INTERVIEWED
  HIRED
}
